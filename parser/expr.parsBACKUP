/* Project:  COCKTAIL training
 * Descr:    LR parser for an expression language
 * Kind:     Parser specification (solution)
 * Author:   Dr. Juergen Vollmer <Juergen.Vollmer@informatik-vollmer.de>
 * $Id: expr-solution.pars,v 1.2 2007/06/01 11:43:20 vollmer Exp $
 */

SCANNER expr_scan

PARSER  expr_pars

GLOBAL {
 # include <stdio.h>
}


PREC LEFT  '+' '-'
     LEFT  '*' '/'

RULE
root 	= x.

x	= < 
	= '#' name ';' var exec
	.
> .

name	= < 
	=  identifier
	.
> .

var	= <
	= typdef name ';'
	.
	= typdef name ';' var
	.
> .

typdef 	= <
	= 'int'
	.
	= 'float'
	.
	= 'String'
	.
> .

exec	= <
	= 'BEGIN' body 'END' ';'
	.
	=
	.
>.

body 	= <
	= varallocation
	.
	= statement 
	.
	= varallocation body
	.
	= statement body
	.
>.

statement = <
	  = ifstmt
	  .
	  = whilestmt
	  .
	  = forstmt
	  .
>.

varallocation = <
	 = name '='expr ';'
	 .
>.

ifstmt = <
	  = 'if' expr 'then' body
	  .
	  = 'if' expr 'then' body 'else' body
	  .
>.

whilestmt = <
	  = 'while' expr body
	  .
  >.

forstmt = <
	  = 'for' '(' int_const ')' body
	  .
>.
	  
expr = <
    = l:expr '+' r:expr
    .
    = l:expr '-' r:expr
    .
    = l:expr '*' r:expr
    .
    = l:expr '/' r:expr
    .
    = l:expr '<' r:expr
    .
    = l:expr '>' r:expr
    .
    = l:expr '==' r:expr
    .
    = '(' expr ')'
    .
    = int_const
    .
    = float_const
   
    .
    = identifier
    .
    = exprstring
    .
 > .
 
 exprstring = <
    = identfier
    .
    = string_const
    .
    = exprstring '+' exprstring
    .
    
 >.


/* Tokens */
int_const:    [Value: long]   {Value := 0;  } .
float_const:  [Value: double] {Value := 0.0;} .
string_const: [Value: tIdent] {Value := NoIdent;} .
identifier:   [Ident: tIdent] {Ident := NoIdent; } .