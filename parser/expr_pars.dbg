State   15 (  21): derivation trees
-----------------------------------

	shift reduce conflict implicitly repaired

.root _EOF_ 
.x 
 '#' name ';' var.exec 
 'BEGIN'.body 'END' ';' 
.statement body 
|  statement.body 
| .varallocation 
| .name '=' expr ';' 
| .identifier 
.whilestmt 
 'while' condition.body 
 statement.

reduce   59  body:  statement. {identifier} ?

example   r  # identifier ; String identifier ; BEGIN while ( identifier ) for ( int_const ) identifier = identifier ; .identifier = identifier ; END ; 

.root _EOF_ 
.x 
 '#'.name ';' var exec 
.identifier 

shift    29  name: .identifier ?

example   s  # .identifier ; String identifier ; 

.root _EOF_ 
.x 
 '#' name ';' var.exec 
 'BEGIN'.body 'END' ';' 
.statement body 
|  statement.body 
| .statement 
| .ifstmt 
| .'if' condition 'then' body 
.whilestmt 
 'while' condition.body 
 statement.

reduce   59  body:  statement. {'if'} ?

example   r  # identifier ; String identifier ; BEGIN while ( identifier ) for ( int_const ) identifier = identifier ; .if ( identifier ) then identifier = identifier ; END ; 

 ...
 'BEGIN'.body 'END' ';' 
.statement 
.ifstmt 
.'if' condition 'then' body 

shift    82  ifstmt: .'if' condition 'then' body ?

example   s  # identifier ; String identifier ; BEGIN .if ( identifier ) then identifier = identifier ; END ; 

 ...
.ifstmt 
.'if' condition 'then' body 'else' body 

shift    84  ifstmt: .'if' condition 'then' body 'else' body ?

example   s  # identifier ; String identifier ; BEGIN .if ( identifier ) then identifier = identifier ; else identifier = identifier ; END ; 

 ...
 'BEGIN'.body 'END' ';' 
.statement body 
|  statement.body 
| .statement 
| .whilestmt 
| .'while' condition body 
.whilestmt 
 'while' condition.body 
 statement.

reduce   59  body:  statement. {'while'} ?

example   r  # identifier ; String identifier ; BEGIN while ( identifier ) for ( int_const ) identifier = identifier ; .while ( identifier ) identifier = identifier ; END ; 

 ...
 'BEGIN'.body 'END' ';' 
.statement 
.whilestmt 
.'while' condition body 

shift    89  whilestmt: .'while' condition body ?

example   s  # identifier ; String identifier ; BEGIN .while ( identifier ) identifier = identifier ; END ; 

 ...
 'BEGIN'.body 'END' ';' 
.statement body 
|  statement.body 
| .statement 
| .forstmt 
| .'for' '(' int_const ')' body 
.whilestmt 
 'while' condition.body 
 statement.

reduce   59  body:  statement. {'for'} ?

example   r  # identifier ; String identifier ; BEGIN while ( identifier ) for ( int_const ) identifier = identifier ; .for ( int_const ) identifier = identifier ; END ; 

 ...
 'BEGIN'.body 'END' ';' 
.statement 
.forstmt 
.'for' '(' int_const ')' body 

shift    94  forstmt: .'for' '(' int_const ')' body ?

example   s  # identifier ; String identifier ; BEGIN .for ( int_const ) identifier = identifier ; END ; 

State   15 (  21): summary
--------------------------

ignore reduce   59  body:  statement. {identifier}
retain shift    29  name: .identifier 

ignore reduce   59  body:  statement. {'if'}
retain shift    82  ifstmt: .'if' condition 'then' body 
retain shift    84  ifstmt: .'if' condition 'then' body 'else' body 

ignore reduce   59  body:  statement. {'while'}
retain shift    89  whilestmt: .'while' condition body 

ignore reduce   59  body:  statement. {'for'}
retain shift    94  forstmt: .'for' '(' int_const ')' body 

State   16 (  22): derivation trees
-----------------------------------

	shift reduce conflict implicitly repaired

.root _EOF_ 
.x 
 '#' name ';' var.exec 
 'BEGIN'.body 'END' ';' 
.statement body 
|  statement.body 
| .varallocation 
| .name '=' expr ';' 
| .identifier 
.whilestmt 
 'while' condition.body 
 varallocation.

reduce   57  body:  varallocation. {identifier} ?

example   r  # identifier ; String identifier ; BEGIN while ( identifier ) identifier = identifier ; .identifier = identifier ; END ; 

.root _EOF_ 
.x 
 '#'.name ';' var exec 
.identifier 

shift    29  name: .identifier ?

example   s  # .identifier ; String identifier ; 

.root _EOF_ 
.x 
 '#' name ';' var.exec 
 'BEGIN'.body 'END' ';' 
.statement body 
|  statement.body 
| .statement 
| .ifstmt 
| .'if' condition 'then' body 
.whilestmt 
 'while' condition.body 
 varallocation.

reduce   57  body:  varallocation. {'if'} ?

example   r  # identifier ; String identifier ; BEGIN while ( identifier ) identifier = identifier ; .if ( identifier ) then identifier = identifier ; END ; 

 ...
 'BEGIN'.body 'END' ';' 
.statement 
.ifstmt 
.'if' condition 'then' body 

shift    82  ifstmt: .'if' condition 'then' body ?

example   s  # identifier ; String identifier ; BEGIN .if ( identifier ) then identifier = identifier ; END ; 

 ...
.ifstmt 
.'if' condition 'then' body 'else' body 

shift    84  ifstmt: .'if' condition 'then' body 'else' body ?

example   s  # identifier ; String identifier ; BEGIN .if ( identifier ) then identifier = identifier ; else identifier = identifier ; END ; 

 ...
 'BEGIN'.body 'END' ';' 
.statement body 
|  statement.body 
| .statement 
| .whilestmt 
| .'while' condition body 
.whilestmt 
 'while' condition.body 
 varallocation.

reduce   57  body:  varallocation. {'while'} ?

example   r  # identifier ; String identifier ; BEGIN while ( identifier ) identifier = identifier ; .while ( identifier ) identifier = identifier ; END ; 

 ...
 'BEGIN'.body 'END' ';' 
.statement 
.whilestmt 
.'while' condition body 

shift    89  whilestmt: .'while' condition body ?

example   s  # identifier ; String identifier ; BEGIN .while ( identifier ) identifier = identifier ; END ; 

 ...
 'BEGIN'.body 'END' ';' 
.statement body 
|  statement.body 
| .statement 
| .forstmt 
| .'for' '(' int_const ')' body 
.whilestmt 
 'while' condition.body 
 varallocation.

reduce   57  body:  varallocation. {'for'} ?

example   r  # identifier ; String identifier ; BEGIN while ( identifier ) identifier = identifier ; .for ( int_const ) identifier = identifier ; END ; 

 ...
 'BEGIN'.body 'END' ';' 
.statement 
.forstmt 
.'for' '(' int_const ')' body 

shift    94  forstmt: .'for' '(' int_const ')' body ?

example   s  # identifier ; String identifier ; BEGIN .for ( int_const ) identifier = identifier ; END ; 

State   16 (  22): summary
--------------------------

ignore reduce   57  body:  varallocation. {identifier}
retain shift    29  name: .identifier 

ignore reduce   57  body:  varallocation. {'if'}
retain shift    82  ifstmt: .'if' condition 'then' body 
retain shift    84  ifstmt: .'if' condition 'then' body 'else' body 

ignore reduce   57  body:  varallocation. {'while'}
retain shift    89  whilestmt: .'while' condition body 

ignore reduce   57  body:  varallocation. {'for'}
retain shift    94  forstmt: .'for' '(' int_const ')' body 

State   26 (  43): derivation trees
-----------------------------------

	shift reduce conflict implicitly repaired

.root _EOF_ 
.x 
 '#' name ';' var.exec 
 'BEGIN'.body 'END' ';' 
.varallocation 
 name '='.expr ';' 
.expr '+' expr 
|  expr.'+' expr 
 exprstring.

reduce  128  expr:  exprstring. {'+'} ?

example   r  # identifier ; String identifier ; BEGIN identifier = string_const .+ identifier ; END ; 

 ...
 name '='.expr ';' 
.exprstring 
 exprstring.'+' exprstring 

shift   137  exprstring:  exprstring.'+' exprstring ?

example   s  # identifier ; String identifier ; BEGIN identifier = string_const .+ string_const ; END ; 

State   26 (  43): summary
--------------------------

ignore reduce  128  expr:  exprstring. {'+'}
retain shift   137  exprstring:  exprstring.'+' exprstring 

State   39 (  59): derivation trees
-----------------------------------

	shift reduce conflict implicitly repaired

.root _EOF_ 
.x 
 '#' name ';' var.exec 
 'BEGIN'.body 'END' ';' 
.statement 
.ifstmt 
 'if' condition 'then'.body 'else' body 
|  'if' condition 'then' body.'else' body 
.statement 
.ifstmt 
 'if' condition 'then' body.

reduce   82  ifstmt:  'if' condition 'then' body. {'else'} ?

example   r  # identifier ; String identifier ; BEGIN if ( identifier ) then if ( identifier ) then identifier = identifier ; .else identifier = identifier ; END ; 

 ...
.ifstmt 
 'if' condition 'then' body.'else' body 

shift    84  ifstmt:  'if' condition 'then' body.'else' body ?

example   s  # identifier ; String identifier ; BEGIN if ( identifier ) then identifier = identifier ; .else identifier = identifier ; END ; 

State   39 (  59): summary
--------------------------

ignore reduce   82  ifstmt:  'if' condition 'then' body. {'else'}
retain shift    84  ifstmt:  'if' condition 'then' body.'else' body 

State   41 (  63): derivation trees
-----------------------------------

	shift reduce conflict implicitly repaired

.root _EOF_ 
.x 
 '#' name ';' var.exec 
 'BEGIN'.body 'END' ';' 
.varallocation 
 name '='.expr ';' 
.expr '<' expr 
|  expr.'<' expr 
 expr '+' expr.

reduce  105  expr:  expr '+' expr. {'<'} ?

example   r  # identifier ; String identifier ; BEGIN identifier = identifier + identifier .< identifier ; END ; 

 ...
 name '='.expr ';' 
 expr.'<' expr 

shift   113  expr:  expr.'<' expr ?

example   s  # identifier ; String identifier ; BEGIN identifier = identifier .< identifier ; END ; 

 ...
 name '='.expr ';' 
.expr '>' expr 
|  expr.'>' expr 
 expr '+' expr.

reduce  105  expr:  expr '+' expr. {'>'} ?

example   r  # identifier ; String identifier ; BEGIN identifier = identifier + identifier .> identifier ; END ; 

 ...
 name '='.expr ';' 
 expr.'>' expr 

shift   115  expr:  expr.'>' expr ?

example   s  # identifier ; String identifier ; BEGIN identifier = identifier .> identifier ; END ; 

 ...
 name '='.expr ';' 
.expr '==' expr 
|  expr.'==' expr 
 expr '+' expr.

reduce  105  expr:  expr '+' expr. {'=='} ?

example   r  # identifier ; String identifier ; BEGIN identifier = identifier + identifier .== identifier ; END ; 

 ...
 name '='.expr ';' 
 expr.'==' expr 

shift   117  expr:  expr.'==' expr ?

example   s  # identifier ; String identifier ; BEGIN identifier = identifier .== identifier ; END ; 

State   41 (  63): summary
--------------------------

ignore reduce  105  expr:  expr '+' expr. {'<'}
retain shift   113  expr:  expr.'<' expr 

ignore reduce  105  expr:  expr '+' expr. {'>'}
retain shift   115  expr:  expr.'>' expr 

ignore reduce  105  expr:  expr '+' expr. {'=='}
retain shift   117  expr:  expr.'==' expr 

State   42 (  64): derivation trees
-----------------------------------

	shift reduce conflict implicitly repaired

.root _EOF_ 
.x 
 '#' name ';' var.exec 
 'BEGIN'.body 'END' ';' 
.varallocation 
 name '='.expr ';' 
.expr '<' expr 
|  expr.'<' expr 
 expr '-' expr.

reduce  107  expr:  expr '-' expr. {'<'} ?

example   r  # identifier ; String identifier ; BEGIN identifier = identifier - identifier .< identifier ; END ; 

 ...
 name '='.expr ';' 
 expr.'<' expr 

shift   113  expr:  expr.'<' expr ?

example   s  # identifier ; String identifier ; BEGIN identifier = identifier .< identifier ; END ; 

 ...
 name '='.expr ';' 
.expr '>' expr 
|  expr.'>' expr 
 expr '-' expr.

reduce  107  expr:  expr '-' expr. {'>'} ?

example   r  # identifier ; String identifier ; BEGIN identifier = identifier - identifier .> identifier ; END ; 

 ...
 name '='.expr ';' 
 expr.'>' expr 

shift   115  expr:  expr.'>' expr ?

example   s  # identifier ; String identifier ; BEGIN identifier = identifier .> identifier ; END ; 

 ...
 name '='.expr ';' 
.expr '==' expr 
|  expr.'==' expr 
 expr '-' expr.

reduce  107  expr:  expr '-' expr. {'=='} ?

example   r  # identifier ; String identifier ; BEGIN identifier = identifier - identifier .== identifier ; END ; 

 ...
 name '='.expr ';' 
 expr.'==' expr 

shift   117  expr:  expr.'==' expr ?

example   s  # identifier ; String identifier ; BEGIN identifier = identifier .== identifier ; END ; 

State   42 (  64): summary
--------------------------

ignore reduce  107  expr:  expr '-' expr. {'<'}
retain shift   113  expr:  expr.'<' expr 

ignore reduce  107  expr:  expr '-' expr. {'>'}
retain shift   115  expr:  expr.'>' expr 

ignore reduce  107  expr:  expr '-' expr. {'=='}
retain shift   117  expr:  expr.'==' expr 

State   43 (  65): derivation trees
-----------------------------------

	shift reduce conflict implicitly repaired

.root _EOF_ 
.x 
 '#' name ';' var.exec 
 'BEGIN'.body 'END' ';' 
.varallocation 
 name '='.expr ';' 
.expr '<' expr 
|  expr.'<' expr 
 expr '*' expr.

reduce  109  expr:  expr '*' expr. {'<'} ?

example   r  # identifier ; String identifier ; BEGIN identifier = identifier * identifier .< identifier ; END ; 

 ...
 name '='.expr ';' 
 expr.'<' expr 

shift   113  expr:  expr.'<' expr ?

example   s  # identifier ; String identifier ; BEGIN identifier = identifier .< identifier ; END ; 

 ...
 name '='.expr ';' 
.expr '>' expr 
|  expr.'>' expr 
 expr '*' expr.

reduce  109  expr:  expr '*' expr. {'>'} ?

example   r  # identifier ; String identifier ; BEGIN identifier = identifier * identifier .> identifier ; END ; 

 ...
 name '='.expr ';' 
 expr.'>' expr 

shift   115  expr:  expr.'>' expr ?

example   s  # identifier ; String identifier ; BEGIN identifier = identifier .> identifier ; END ; 

 ...
 name '='.expr ';' 
.expr '==' expr 
|  expr.'==' expr 
 expr '*' expr.

reduce  109  expr:  expr '*' expr. {'=='} ?

example   r  # identifier ; String identifier ; BEGIN identifier = identifier * identifier .== identifier ; END ; 

 ...
 name '='.expr ';' 
 expr.'==' expr 

shift   117  expr:  expr.'==' expr ?

example   s  # identifier ; String identifier ; BEGIN identifier = identifier .== identifier ; END ; 

State   43 (  65): summary
--------------------------

ignore reduce  109  expr:  expr '*' expr. {'<'}
retain shift   113  expr:  expr.'<' expr 

ignore reduce  109  expr:  expr '*' expr. {'>'}
retain shift   115  expr:  expr.'>' expr 

ignore reduce  109  expr:  expr '*' expr. {'=='}
retain shift   117  expr:  expr.'==' expr 

State   44 (  66): derivation trees
-----------------------------------

	shift reduce conflict implicitly repaired

.root _EOF_ 
.x 
 '#' name ';' var.exec 
 'BEGIN'.body 'END' ';' 
.varallocation 
 name '='.expr ';' 
.expr '<' expr 
|  expr.'<' expr 
 expr '/' expr.

reduce  111  expr:  expr '/' expr. {'<'} ?

example   r  # identifier ; String identifier ; BEGIN identifier = identifier / identifier .< identifier ; END ; 

 ...
 name '='.expr ';' 
 expr.'<' expr 

shift   113  expr:  expr.'<' expr ?

example   s  # identifier ; String identifier ; BEGIN identifier = identifier .< identifier ; END ; 

 ...
 name '='.expr ';' 
.expr '>' expr 
|  expr.'>' expr 
 expr '/' expr.

reduce  111  expr:  expr '/' expr. {'>'} ?

example   r  # identifier ; String identifier ; BEGIN identifier = identifier / identifier .> identifier ; END ; 

 ...
 name '='.expr ';' 
 expr.'>' expr 

shift   115  expr:  expr.'>' expr ?

example   s  # identifier ; String identifier ; BEGIN identifier = identifier .> identifier ; END ; 

 ...
 name '='.expr ';' 
.expr '==' expr 
|  expr.'==' expr 
 expr '/' expr.

reduce  111  expr:  expr '/' expr. {'=='} ?

example   r  # identifier ; String identifier ; BEGIN identifier = identifier / identifier .== identifier ; END ; 

 ...
 name '='.expr ';' 
 expr.'==' expr 

shift   117  expr:  expr.'==' expr ?

example   s  # identifier ; String identifier ; BEGIN identifier = identifier .== identifier ; END ; 

State   44 (  66): summary
--------------------------

ignore reduce  111  expr:  expr '/' expr. {'<'}
retain shift   113  expr:  expr.'<' expr 

ignore reduce  111  expr:  expr '/' expr. {'>'}
retain shift   115  expr:  expr.'>' expr 

ignore reduce  111  expr:  expr '/' expr. {'=='}
retain shift   117  expr:  expr.'==' expr 

State   45 (  67): derivation trees
-----------------------------------

	shift reduce conflict implicitly repaired

.root _EOF_ 
.x 
 '#' name ';' var.exec 
 'BEGIN'.body 'END' ';' 
.varallocation 
 name '='.expr ';' 
.expr '+' expr 
|  expr.'+' expr 
 expr '<' expr.

reduce  113  expr:  expr '<' expr. {'+'} ?

example   r  # identifier ; String identifier ; BEGIN identifier = identifier < identifier .+ identifier ; END ; 

 ...
 name '='.expr ';' 
 expr.'+' expr 

shift   105  expr:  expr.'+' expr ?

example   s  # identifier ; String identifier ; BEGIN identifier = identifier .+ identifier ; END ; 

 ...
 name '='.expr ';' 
.expr '-' expr 
|  expr.'-' expr 
 expr '<' expr.

reduce  113  expr:  expr '<' expr. {'-'} ?

example   r  # identifier ; String identifier ; BEGIN identifier = identifier < identifier .- identifier ; END ; 

 ...
 name '='.expr ';' 
 expr.'-' expr 

shift   107  expr:  expr.'-' expr ?

example   s  # identifier ; String identifier ; BEGIN identifier = identifier .- identifier ; END ; 

 ...
 name '='.expr ';' 
.expr '*' expr 
|  expr.'*' expr 
 expr '<' expr.

reduce  113  expr:  expr '<' expr. {'*'} ?

example   r  # identifier ; String identifier ; BEGIN identifier = identifier < identifier .* identifier ; END ; 

 ...
 name '='.expr ';' 
 expr.'*' expr 

shift   109  expr:  expr.'*' expr ?

example   s  # identifier ; String identifier ; BEGIN identifier = identifier .* identifier ; END ; 

 ...
 name '='.expr ';' 
.expr '/' expr 
|  expr.'/' expr 
 expr '<' expr.

reduce  113  expr:  expr '<' expr. {'/'} ?

example   r  # identifier ; String identifier ; BEGIN identifier = identifier < identifier ./ identifier ; END ; 

 ...
 name '='.expr ';' 
 expr.'/' expr 

shift   111  expr:  expr.'/' expr ?

example   s  # identifier ; String identifier ; BEGIN identifier = identifier ./ identifier ; END ; 

 ...
 name '='.expr ';' 
.expr '<' expr 
|  expr.'<' expr 
 expr '<' expr.

reduce  113  expr:  expr '<' expr. {'<'} ?

example   r  # identifier ; String identifier ; BEGIN identifier = identifier < identifier .< identifier ; END ; 

 ...
 name '='.expr ';' 
 expr.'<' expr 

shift   113  expr:  expr.'<' expr ?

example   s  # identifier ; String identifier ; BEGIN identifier = identifier .< identifier ; END ; 

 ...
 name '='.expr ';' 
.expr '>' expr 
|  expr.'>' expr 
 expr '<' expr.

reduce  113  expr:  expr '<' expr. {'>'} ?

example   r  # identifier ; String identifier ; BEGIN identifier = identifier < identifier .> identifier ; END ; 

 ...
 name '='.expr ';' 
 expr.'>' expr 

shift   115  expr:  expr.'>' expr ?

example   s  # identifier ; String identifier ; BEGIN identifier = identifier .> identifier ; END ; 

 ...
 name '='.expr ';' 
.expr '==' expr 
|  expr.'==' expr 
 expr '<' expr.

reduce  113  expr:  expr '<' expr. {'=='} ?

example   r  # identifier ; String identifier ; BEGIN identifier = identifier < identifier .== identifier ; END ; 

 ...
 name '='.expr ';' 
 expr.'==' expr 

shift   117  expr:  expr.'==' expr ?

example   s  # identifier ; String identifier ; BEGIN identifier = identifier .== identifier ; END ; 

State   45 (  67): summary
--------------------------

ignore reduce  113  expr:  expr '<' expr. {'+'}
retain shift   105  expr:  expr.'+' expr 

ignore reduce  113  expr:  expr '<' expr. {'-'}
retain shift   107  expr:  expr.'-' expr 

ignore reduce  113  expr:  expr '<' expr. {'*'}
retain shift   109  expr:  expr.'*' expr 

ignore reduce  113  expr:  expr '<' expr. {'/'}
retain shift   111  expr:  expr.'/' expr 

ignore reduce  113  expr:  expr '<' expr. {'<'}
retain shift   113  expr:  expr.'<' expr 

ignore reduce  113  expr:  expr '<' expr. {'>'}
retain shift   115  expr:  expr.'>' expr 

ignore reduce  113  expr:  expr '<' expr. {'=='}
retain shift   117  expr:  expr.'==' expr 

State   46 (  68): derivation trees
-----------------------------------

	shift reduce conflict implicitly repaired

.root _EOF_ 
.x 
 '#' name ';' var.exec 
 'BEGIN'.body 'END' ';' 
.varallocation 
 name '='.expr ';' 
.expr '+' expr 
|  expr.'+' expr 
 expr '>' expr.

reduce  115  expr:  expr '>' expr. {'+'} ?

example   r  # identifier ; String identifier ; BEGIN identifier = identifier > identifier .+ identifier ; END ; 

 ...
 name '='.expr ';' 
 expr.'+' expr 

shift   105  expr:  expr.'+' expr ?

example   s  # identifier ; String identifier ; BEGIN identifier = identifier .+ identifier ; END ; 

 ...
 name '='.expr ';' 
.expr '-' expr 
|  expr.'-' expr 
 expr '>' expr.

reduce  115  expr:  expr '>' expr. {'-'} ?

example   r  # identifier ; String identifier ; BEGIN identifier = identifier > identifier .- identifier ; END ; 

 ...
 name '='.expr ';' 
 expr.'-' expr 

shift   107  expr:  expr.'-' expr ?

example   s  # identifier ; String identifier ; BEGIN identifier = identifier .- identifier ; END ; 

 ...
 name '='.expr ';' 
.expr '*' expr 
|  expr.'*' expr 
 expr '>' expr.

reduce  115  expr:  expr '>' expr. {'*'} ?

example   r  # identifier ; String identifier ; BEGIN identifier = identifier > identifier .* identifier ; END ; 

 ...
 name '='.expr ';' 
 expr.'*' expr 

shift   109  expr:  expr.'*' expr ?

example   s  # identifier ; String identifier ; BEGIN identifier = identifier .* identifier ; END ; 

 ...
 name '='.expr ';' 
.expr '/' expr 
|  expr.'/' expr 
 expr '>' expr.

reduce  115  expr:  expr '>' expr. {'/'} ?

example   r  # identifier ; String identifier ; BEGIN identifier = identifier > identifier ./ identifier ; END ; 

 ...
 name '='.expr ';' 
 expr.'/' expr 

shift   111  expr:  expr.'/' expr ?

example   s  # identifier ; String identifier ; BEGIN identifier = identifier ./ identifier ; END ; 

 ...
 name '='.expr ';' 
.expr '<' expr 
|  expr.'<' expr 
 expr '>' expr.

reduce  115  expr:  expr '>' expr. {'<'} ?

example   r  # identifier ; String identifier ; BEGIN identifier = identifier > identifier .< identifier ; END ; 

 ...
 name '='.expr ';' 
 expr.'<' expr 

shift   113  expr:  expr.'<' expr ?

example   s  # identifier ; String identifier ; BEGIN identifier = identifier .< identifier ; END ; 

 ...
 name '='.expr ';' 
.expr '>' expr 
|  expr.'>' expr 
 expr '>' expr.

reduce  115  expr:  expr '>' expr. {'>'} ?

example   r  # identifier ; String identifier ; BEGIN identifier = identifier > identifier .> identifier ; END ; 

 ...
 name '='.expr ';' 
 expr.'>' expr 

shift   115  expr:  expr.'>' expr ?

example   s  # identifier ; String identifier ; BEGIN identifier = identifier .> identifier ; END ; 

 ...
 name '='.expr ';' 
.expr '==' expr 
|  expr.'==' expr 
 expr '>' expr.

reduce  115  expr:  expr '>' expr. {'=='} ?

example   r  # identifier ; String identifier ; BEGIN identifier = identifier > identifier .== identifier ; END ; 

 ...
 name '='.expr ';' 
 expr.'==' expr 

shift   117  expr:  expr.'==' expr ?

example   s  # identifier ; String identifier ; BEGIN identifier = identifier .== identifier ; END ; 

State   46 (  68): summary
--------------------------

ignore reduce  115  expr:  expr '>' expr. {'+'}
retain shift   105  expr:  expr.'+' expr 

ignore reduce  115  expr:  expr '>' expr. {'-'}
retain shift   107  expr:  expr.'-' expr 

ignore reduce  115  expr:  expr '>' expr. {'*'}
retain shift   109  expr:  expr.'*' expr 

ignore reduce  115  expr:  expr '>' expr. {'/'}
retain shift   111  expr:  expr.'/' expr 

ignore reduce  115  expr:  expr '>' expr. {'<'}
retain shift   113  expr:  expr.'<' expr 

ignore reduce  115  expr:  expr '>' expr. {'>'}
retain shift   115  expr:  expr.'>' expr 

ignore reduce  115  expr:  expr '>' expr. {'=='}
retain shift   117  expr:  expr.'==' expr 

State   47 (  69): derivation trees
-----------------------------------

	shift reduce conflict implicitly repaired

.root _EOF_ 
.x 
 '#' name ';' var.exec 
 'BEGIN'.body 'END' ';' 
.varallocation 
 name '='.expr ';' 
.expr '+' expr 
|  expr.'+' expr 
 expr '==' expr.

reduce  117  expr:  expr '==' expr. {'+'} ?

example   r  # identifier ; String identifier ; BEGIN identifier = identifier == identifier .+ identifier ; END ; 

 ...
 name '='.expr ';' 
 expr.'+' expr 

shift   105  expr:  expr.'+' expr ?

example   s  # identifier ; String identifier ; BEGIN identifier = identifier .+ identifier ; END ; 

 ...
 name '='.expr ';' 
.expr '-' expr 
|  expr.'-' expr 
 expr '==' expr.

reduce  117  expr:  expr '==' expr. {'-'} ?

example   r  # identifier ; String identifier ; BEGIN identifier = identifier == identifier .- identifier ; END ; 

 ...
 name '='.expr ';' 
 expr.'-' expr 

shift   107  expr:  expr.'-' expr ?

example   s  # identifier ; String identifier ; BEGIN identifier = identifier .- identifier ; END ; 

 ...
 name '='.expr ';' 
.expr '*' expr 
|  expr.'*' expr 
 expr '==' expr.

reduce  117  expr:  expr '==' expr. {'*'} ?

example   r  # identifier ; String identifier ; BEGIN identifier = identifier == identifier .* identifier ; END ; 

 ...
 name '='.expr ';' 
 expr.'*' expr 

shift   109  expr:  expr.'*' expr ?

example   s  # identifier ; String identifier ; BEGIN identifier = identifier .* identifier ; END ; 

 ...
 name '='.expr ';' 
.expr '/' expr 
|  expr.'/' expr 
 expr '==' expr.

reduce  117  expr:  expr '==' expr. {'/'} ?

example   r  # identifier ; String identifier ; BEGIN identifier = identifier == identifier ./ identifier ; END ; 

 ...
 name '='.expr ';' 
 expr.'/' expr 

shift   111  expr:  expr.'/' expr ?

example   s  # identifier ; String identifier ; BEGIN identifier = identifier ./ identifier ; END ; 

 ...
 name '='.expr ';' 
.expr '<' expr 
|  expr.'<' expr 
 expr '==' expr.

reduce  117  expr:  expr '==' expr. {'<'} ?

example   r  # identifier ; String identifier ; BEGIN identifier = identifier == identifier .< identifier ; END ; 

 ...
 name '='.expr ';' 
 expr.'<' expr 

shift   113  expr:  expr.'<' expr ?

example   s  # identifier ; String identifier ; BEGIN identifier = identifier .< identifier ; END ; 

 ...
 name '='.expr ';' 
.expr '>' expr 
|  expr.'>' expr 
 expr '==' expr.

reduce  117  expr:  expr '==' expr. {'>'} ?

example   r  # identifier ; String identifier ; BEGIN identifier = identifier == identifier .> identifier ; END ; 

 ...
 name '='.expr ';' 
 expr.'>' expr 

shift   115  expr:  expr.'>' expr ?

example   s  # identifier ; String identifier ; BEGIN identifier = identifier .> identifier ; END ; 

 ...
 name '='.expr ';' 
.expr '==' expr 
|  expr.'==' expr 
 expr '==' expr.

reduce  117  expr:  expr '==' expr. {'=='} ?

example   r  # identifier ; String identifier ; BEGIN identifier = identifier == identifier .== identifier ; END ; 

 ...
 name '='.expr ';' 
 expr.'==' expr 

shift   117  expr:  expr.'==' expr ?

example   s  # identifier ; String identifier ; BEGIN identifier = identifier .== identifier ; END ; 

State   47 (  69): summary
--------------------------

ignore reduce  117  expr:  expr '==' expr. {'+'}
retain shift   105  expr:  expr.'+' expr 

ignore reduce  117  expr:  expr '==' expr. {'-'}
retain shift   107  expr:  expr.'-' expr 

ignore reduce  117  expr:  expr '==' expr. {'*'}
retain shift   109  expr:  expr.'*' expr 

ignore reduce  117  expr:  expr '==' expr. {'/'}
retain shift   111  expr:  expr.'/' expr 

ignore reduce  117  expr:  expr '==' expr. {'<'}
retain shift   113  expr:  expr.'<' expr 

ignore reduce  117  expr:  expr '==' expr. {'>'}
retain shift   115  expr:  expr.'>' expr 

ignore reduce  117  expr:  expr '==' expr. {'=='}
retain shift   117  expr:  expr.'==' expr 

